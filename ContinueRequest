<script runat="server">
Platform.Load("core", "1");

try {
    var api = new Script.Util.WSProxy();
    var soapObjectName = "DataExtension";

    // Describe the object to find retrievable properties
    var desc = api.describe(soapObjectName);
    var props = desc && desc.Results && desc.Results[0].Properties || [];
    var retrievableProps = [];

    for (var i = 0; i < props.length; i++) {
        if (props[i].IsRetrievable === true) {
            retrievableProps.push(props[i].Name);
        }
    }

    // Optional filter (null retrieves all)
    var filter = null;

    // Options
    var opts= { BatchSize:200};
    var props={ QueryAllAccounts: true}

    var allResults = [];
    var hasMoreData = true;
    var requestId = null;
    var batchCount = 0;

    // Loop through all batches
    while (hasMoreData) {
        var response = RetrieveSoapObject(api, soapObjectName, retrievableProps, filter, opts,props, requestId);
        batchCount++;

        if (response && response.Results && response.Results.length > 0) {
            Write("Batch " + batchCount + ": Retrieved " + response.Results.length + " records.<br>");
        } else {
            Write("Batch " + batchCount + ": No records returned.<br>");
        }

        hasMoreData = response && response.HasMoreRows === true;
        requestId = response && response.RequestID;
     
    }


} catch (ex) {
     Write(ex.message);
     Write(ex.description);
     Write(ex.jintException);
}

// Helper function for retrieval with pagination
function RetrieveSoapObject(api, soapObjectName, retrievableProps, filter, opts, props, requestId) {
    var response;
    if (requestId) 
       props.ContinueRequest = requestId;
        response = api.retrieve(soapObjectName, retrievableProps, filter, opts, props);
    return response;
}
</script>
